train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
call_agraph(train, valid, test, params, "classification")
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
call_agraph(train, valid, test, params, "classification")
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
call_agraph(train, valid, test, params, "classification")
data = simulate_extra(n = 100, p = 15, response = "linear")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(lams1 = 10, lams2 = 0.1, gams = 0.001)
call_agraph(train, valid, test, params, "regression")
params = c(lams1 = 10, lams2 = 1, gams = 0.001)
call_agraph(train, valid, test, params, "regression")
params = c(lams1 = 10, lams2 = 1, gams = 0.01)
call_agraph(train, valid, test, params, "regression")
library(RSSL)
data = simulate_extra(n = 100, p = 15, response = "linear")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
model = ICLeastSquaresClassifier(X = train$xL, y = train$yL, X_u = train$xU)
as.factor(train$yL)
data = simulate_extra(n = 100, p = 15, response = "lofit")
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
model = ICLeastSquaresClassifier(X = train$xL, y = train$yL, X_u = train$xU)
train$xL
factor(train$yL)
model = ICLeastSquaresClassifier(X = train$xL, y = factor(train$yL), X_u = train$xU)
model@theta
ypred = predict(model, test$xL)
ypred = predict(model, test$xL, probs = TRUE)
ypred
ypred = predict(model, valid$xL)
source("performance.R")
perf.valid = performance_measures(valid, ypred, type = "classification", fold = "valid")
ypred = predict(model, valid$xL)
perf.valid = performance_measures(valid, ypred, type = "classification", fold = "valid")
as.numeric(predict(model, valid$xL))-1
ypred = as.numeric(predict(model, valid$xL))-1
perf.valid = performance_measures(valid, ypred, type = "classification", fold = "valid")
perf.valid
# Wrapper to call the ICLS classif. from Krijthe and Loog (2017). See R package `RSSL`
# params: lambda1, lambda2
call_ICLS = function(train, valid, test, params){
model = ICLeastSquaresClassifier(X = train$xL, y = factor(train$yL), X_u = train$xU)
ypred = as.numeric(predict(model, valid$xL))-1
perf.valid = performance_measures(valid, ypred, type = "classification", fold = "valid")
ypred = as.numeric(predict(model, test$xL))-1
perf.test = performance_measures(test, ypred, type = "classification", fold = "test")
return(c(perf.valid, perf.test))
}
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
# Wrapper to call the ICLS classif. from Krijthe and Loog (2017). See R package `RSSL`
# params: lambda1, lambda2
call_ICLS = function(train, valid, test, params){
model = ICLeastSquaresClassifier(X = train$xL, y = factor(train$yL), X_u = train$xU,
lambda1 = params[1], lambda2 = params[2])
ypred = as.numeric(predict(model, valid$xL))-1
perf.valid = performance_measures(valid, ypred, type = "classification", fold = "valid")
ypred = as.numeric(predict(model, test$xL))-1
perf.test = performance_measures(test, ypred, type = "classification", fold = "test")
return(c(perf.valid, perf.test))
}
library(RSSL)
source("performance.R")
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
model = ICLeastSquaresClassifier(X = train$xL, y = factor(train$yL), X_u = train$xU)
ypred = predict(model, test$xL)
# Wrapper to call the ICLS classif. from Krijthe and Loog (2017). See R package `RSSL`
# params: lambda1, lambda2
call_ICLS = function(train, valid, test, params){
model = ICLeastSquaresClassifier(X = train$xL, y = factor(train$yL), X_u = train$xU,
lambda1 = params[1], lambda2 = params[2])
ypred = as.numeric(predict(model, valid$xL))-1
perf.valid = performance_measures(valid, ypred, type = "classification", fold = "valid")
ypred = as.numeric(predict(model, test$xL))-1
perf.test = performance_measures(test, ypred, type = "classification", fold = "test")
return(c(perf.valid, perf.test))
}
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(0.01, 0.01)
call_ICLS(train, valid, test, params)
library(RSSL)
source("performance.R")
# #Example
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(0.01, 0.01, 0.01, 0.01)
model = S4VM(X = train$xL, y = factor(train$yL), X_u = train$xU,
C1 = params[1],
C2 = params[2],
gamma = params[3],
lambda_tradeoff = params[4])
model
predict(model, valid$xL)
model@predictions
model@labelings
model@predictions
length(model@predictions)
model = S4VM(X = train$xL, y = factor(train$yL), X_u = train$xU,
C1 = params[1],
C2 = params[2],
gamma = params[3],
lambda_tradeoff = params[4])
model@scaling
library(glmnet)
## Example
data("auto_mpg")
idx = sample(length(auto_mpg$P1$yU), 200)
train = nExtData(xL = auto_mpg$P1$xL, yL = auto_mpg$P1$yL, xU = auto_mpg$P1$xU[idx, ])
valid = nExtData(xL = auto_mpg$P1$xU[-idx, ], yL = auto_mpg$P1$yU[-idx], preprocess = train)
test = nExtData(xL = auto_mpg$P1$xU[idx, ], yL = auto_mpg$P1$yU[idx], preprocess = train)
params = c(0.5, 0.01, 0.1, 100)
model = glmnet(x = train$xL, y = train$yL, family = "gaussian",
alpha = params[1],
lambda = params[2])
source('~/.active-rstudio-document', echo=TRUE)
ypred = predict(model, valid$xL, type = "response")
ypred
source("performance.R")
perf.valid = performance_measures(valid, ypred, "regression", "valid")
perf.valid
model = glmnet(x = train$xL, y = train$yL, family = "gaussian",
alpha = params[1],
lambda = params[2])
ypred = predict(model, valid$xL, type = "response")
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = predict(model, test$xL, type = "response")
perf.test = performance_measures(test, ypred, "regression", "test")
perf.test
c(perf.valid, perf.test)
## Example
data("auto_mpg")
idx = sample(length(auto_mpg$P1$yU), 200)
train = nExtData(xL = auto_mpg$P1$xL, yL = auto_mpg$P1$yL, xU = auto_mpg$P1$xU[idx, ])
valid = nExtData(xL = auto_mpg$P1$xU[-idx, ], yL = auto_mpg$P1$yU[-idx], preprocess = train)
test = nExtData(xL = auto_mpg$P1$xU[idx, ], yL = auto_mpg$P1$yU[idx], preprocess = train)
params = c(0.5, 0.01, 0.1, 100)
call_glmnet(train, valid, test, params)
# Wrapper for `glmnet`
# params: alpha, lambda
call_glmnet = function(train, valid, test, params, type = "regression"){
switch (type,
regression = {
model = glmnet(x = train$xL, y = train$yL, family = "gaussian",
alpha = params[1],
lambda = params[2])
ypred = predict(model, valid$xL, type = "response")
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = predict(model, test$xL, type = "response")
perf.test = performance_measures(test, ypred, "regression", "test")
},
classification = {
model = glmnet(x = train$xL, y = train$yL, family = "binomial",
alpha = params[1],
lambda = params[2])
ypred = predict(model, valid$xL, type = "probs")
perf.valid = performance_measures(valid, ypred, "classification", "valid")
ypred = predict(model, test$xL, type = "probs")
perf.test = performance_measures(test, ypred, "classification", "test")
}
)
c(perf.valid, perf.test)
}
call_glmnet(train, valid, test, params)
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
call_glmnet(train, valid, test, params, "classification")
model = glmnet(x = train$xL, y = train$yL, family = "binomial",
alpha = params[1],
lambda = params[2])
ypred = predict(model, valid$xL, type = "probs")
ypred = predict(model, valid$xL, type = "response")
ypred
ypred = predict(model, valid$xL, type = "response")
perf.valid = performance_measures(valid, ypred, "classification", "valid")
ypred = predict(model, test$xL, type = "response")
perf.test = performance_measures(test, ypred, "classification", "test")
# Wrapper for `glmnet`
# params: alpha, lambda
call_glmnet = function(train, valid, test, params, type = "regression"){
switch (type,
regression = {
model = glmnet(x = train$xL, y = train$yL, family = "gaussian",
alpha = params[1],
lambda = params[2])
ypred = predict(model, valid$xL, type = "response")
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = predict(model, test$xL, type = "response")
perf.test = performance_measures(test, ypred, "regression", "test")
},
classification = {
model = glmnet(x = train$xL, y = train$yL, family = "binomial",
alpha = params[1],
lambda = params[2])
ypred = predict(model, valid$xL, type = "response")
perf.valid = performance_measures(valid, ypred, "classification", "valid")
ypred = predict(model, test$xL, type = "response")
perf.test = performance_measures(test, ypred, "classification", "test")
}
)
c(perf.valid, perf.test)
}
## Example
data("auto_mpg")
idx = sample(length(auto_mpg$P1$yU), 200)
train = nExtData(xL = auto_mpg$P1$xL, yL = auto_mpg$P1$yL, xU = auto_mpg$P1$xU[idx, ])
valid = nExtData(xL = auto_mpg$P1$xU[-idx, ], yL = auto_mpg$P1$yU[-idx], preprocess = train)
test = nExtData(xL = auto_mpg$P1$xU[idx, ], yL = auto_mpg$P1$yU[idx], preprocess = train)
params = c(0.5, 0.01, 0.1, 100)
call_glmnet(train, valid, test, params)
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
call_glmnet(train, valid, test, params, "classification")
library(nExtJTRcpp)
model = new(nExtJT, train, 0)
model
ypred = model$predict(valid$xL, 0)
ypred
model = new(nExtJT, train, 0)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "regression", "test")
model = new(nExtJT, train, 0)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
ypred
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
model$beta
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
model = new(nExtJT, train, 0)
params = c(0.01, 0.01, 0.01, 100, 0.01)
model = new(nExtJT, train, 0)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
data = simulate_extra(n = 100, p = 15, response = "linear")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(0.01, 0.01, 0.01, 100, 0.01)
model = new(nExtJT, train, 0)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
ypred
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "regression", "test")
perf.test
ypred
performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(valid$xL, 0)
performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "regression", "test")
perf.test
test
ypred
test$yL
ypred
performance_measures(test, ypred, "regression", "test")
mse(ypred, test$yL)
ypred - test$yL
(ypred - test$yL)^2
sum((ypred - test$yL)^2)
mean((ypred - test$yL)^2)
mse(ypred, test$yL)
mse(ypred, test$yL)
source("performance.R")
mse(ypred, test$yL)
mse(ypred, test$yL)
mean((ypred - test$yL)^2)
mse(ypred, test$yL)
test$yL
mse(ypred, test$yL)
mse = function(ypred, ytrue){
return(mean(ypred - ytrue)^2)
}
mae = function(ypred, ytrue){
return(mean(abs(ypred - ytrue)))
}
acc = function(ypred, ytrue){
return(mean(((ypred > 0.5)+0) == ytrue))
}
auc = function(ppred, ytrue){
pred = ROCR::prediction(ppred, ytrue)
unlist(ROCR::performance(pred, "auc")@y.values)
}
mae(ypred, test$yL)
mse(ypred, test$yL)
ytrue = test$yL
mse(ypred, ytrue)
mean(ypred - ytrue)^2
source('~/Documents/Doctorado/Estancia/Algorithms/algorithms/performance.R', echo=TRUE)
data = simulate_extra(n = 100, p = 15, response = "linear")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(0.01, 0.01, 0.01, 100, 0.01)
model = new(nExtJT, train, 0)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "regression", "test")
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(0.01, 0.01, 0.01, 100, 0.01)
model = new(nExtJT, train, 1)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
ypred
perf.valid = performance_measures(valid, ypred, "classification", "valid")
perf.valid
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "classification", "test")
perf.test
call_nExtJT(train, valid, test, "regression")
switch (type,
regression = {
model = new(nExtJT, train, 0)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "regression", "test")
},
classification = {
model = new(nExtJT, train, 1)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "classification", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "classification", "test")
}
)
# Wrapper for nExtJT
# params: lambda1, lambda2, gamma1, gamma2, gamma3
call_nExtJT = function(train, valid, test, params, type = "regression"){
switch (type,
regression = {
model = new(nExtJT, train, 0)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "regression", "test")
},
classification = {
model = new(nExtJT, train, 1)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "classification", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "classification", "test")
}
)
}
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(0.01, 0.01, 0.01, 100, 0.01)
call_nExtJT(train, valid, test, "regression")
call_nExtJT(train, valid, test, params, "regression")
# Wrapper for nExtJT
# params: lambda1, lambda2, gamma1, gamma2, gamma3
call_nExtJT = function(train, valid, test, params, type = "regression"){
switch (type,
regression = {
model = new(nExtJT, train, 0)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "regression", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "regression", "test")
},
classification = {
model = new(nExtJT, train, 1)
model$fit(nExtParams(lambda1 = params[1],
lambda2 = params[2],
gamma1 = params[3],
gamma2 = params[4],
gamma3 = params[5]),
frame = 1,
proj = 2)
ypred = model$predict(valid$xL, 0)
perf.valid = performance_measures(valid, ypred, "classification", "valid")
ypred = model$predict(test$xL, 0)
perf.test = performance_measures(test, ypred, "classification", "test")
}
)
return(c(perf.valid, perf.test))
}
data = simulate_extra(n = 100, p = 15, response = "logit")
train = nExtData(data$xL, data$yL, data$xU[1:50,])
valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
test = nExtData(data$xU, data$yU)
params = c(0.01, 0.01, 0.01, 100, 0.01)
call_nExtJT(train, valid, test, params, "regression")
call_nExtJT(train, valid, test, params, "classification")
llibrary(glmne)
llibrary(glmnet)
library(glmnet)
library(nExtJTRcpp)
data("auto_mpg")
data(coo\)
data("cookie")
data("heart")
cookie$yU
load("~/Documents/Doctorado/Estancia/nExtJT/realdata/nExtJT_idrc2002/data/irdc2002.Rdata")
load("~/Documents/Doctorado/Estancia/nExtJT/realdata/nExtJT_spam/data/1.RData")
View(data)
