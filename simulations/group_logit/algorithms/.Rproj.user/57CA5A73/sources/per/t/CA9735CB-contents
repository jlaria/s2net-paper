library(SemiSupervised)

source("performance.R")

# Wrapper for the `agraph` from Culp and Ryan (2018), R package `SemiSupervised`
# params: lams[1:2], gams
call_agraph = function(train, valid, test, params, type = "regression"){
  # convert to data.frame
  data = data.frame(y = as.factor(c(train$yL, rep(NA, nrow(train$xU)))), x = rbind(train$xL, train$xU))
  
  switch (type,
          regression = {
            model = agraph(y~., data, type = "r", 
                         lams = params[1:2],
                         gams = params[3])
            
            ypred = predict(model, data.frame(x = valid$xL))
            perf.valid = performance_measures(valid, ypred, "regression", "valid")
            ypred = predict(model, data.frame(x = test$xL))
            perf.test = performance_measures(test, ypred, "regression", "test")
          },
          classification = {
            model = agraph(y~., data, type = "c", 
                         lams = params[1:2],
                         gams = params[3])
            
            ypred = as.numeric(predict(model, data.frame(x = valid$xL)))
            perf.valid = performance_measures(valid, ypred, "classification", "valid")
            ypred = as.numeric(predict(model, data.frame(x = test$xL))) - 1
            perf.test = performance_measures(test, ypred, "classification", "test")
          }
  )
  return(c(perf.valid, perf.test))
}


# Example

# data = simulate_extra(n = 100, p = 15, response = "linear")
# train = nExtData(data$xL, data$yL, data$xU[1:50,])
# valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
# test = nExtData(data$xU, data$yU)
# 
# params = c(lams1 = 10, lams2 = 1, gams = 0.01)
# 
# call_agraph(train, valid, test, params, "regression")
# 
# data = simulate_extra(n = 100, p = 15, response = "logit")
# train = nExtData(data$xL, data$yL, data$xU[1:50,])
# valid = nExtData(data$xU[1:20,], data$yU[1:20], preprocess = train)
# test = nExtData(data$xU, data$yU)
# 
# call_agraph(train, valid, test, params, "classification")
